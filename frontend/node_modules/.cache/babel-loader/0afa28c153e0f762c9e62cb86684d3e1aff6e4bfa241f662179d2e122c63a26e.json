{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danit\\\\team-availability-system\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useMemo, useState } from 'react';\nimport { authAPI, usersAPI } from '../services/api';\n\n// Context that manages user login state across the whole app\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Hook to use auth context in any component\nexport const useAuth = () => {\n  _s();\n  const ctx = useContext(AuthContext);\n  if (!ctx) throw new Error('useAuth must be used within an AuthProvider');\n  return ctx;\n};\n_s(useAuth, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null); // Current logged in user info\n  const [loading, setLoading] = useState(true); // Are we still checking if user is logged in?\n  const [error, setError] = useState(null); // Any login/auth errors\n\n  // Helper function to get current user info from server\n  const hydrateUser = async () => {\n    const {\n      data\n    } = await usersAPI.getCurrentUser(); // This uses the stored token\n    if (!(data !== null && data !== void 0 && data.user)) throw new Error('Failed to load current user');\n    setUser(data.user);\n    return data.user;\n  };\n\n  // When app starts, check if user is already logged in\n  useEffect(() => {\n    (async () => {\n      try {\n        const token = localStorage.getItem('authToken');\n        if (token) {\n          // Token exists, try to get user info\n          await hydrateUser();\n        }\n      } catch (e) {\n        var _e$response;\n        console.error('Token validation failed:', (e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.data) || e.message);\n        // Token is invalid, remove it\n        localStorage.removeItem('authToken');\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  // Function to log user in\n  const login = async (username, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Send login request to server\n      const {\n        data\n      } = await authAPI.login({\n        username,\n        password\n      });\n      const token = (data === null || data === void 0 ? void 0 : data.token) || (data === null || data === void 0 ? void 0 : data.accessToken);\n      if (!token) throw new Error('No token in response.');\n\n      // Save token so user stays logged in\n      localStorage.setItem('authToken', token);\n\n      // Get fresh user info from server\n      const me = await hydrateUser();\n      return {\n        success: true,\n        user: me\n      };\n    } catch (e) {\n      var _e$response2, _e$response2$data;\n      const msg = (e === null || e === void 0 ? void 0 : (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.error) || e.message || 'Login failed';\n      setError(msg);\n      throw new Error(msg);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    setLoading(true);\n    setError(null);\n    try {\n      if (!authAPI.register) {\n        throw new Error('Register endpoint not implemented on client.');\n      }\n      const {\n        data\n      } = await authAPI.login(userData);\n      const token = (data === null || data === void 0 ? void 0 : data.token) || (data === null || data === void 0 ? void 0 : data.accessToken);\n      if (!token) throw new Error('No token in response.');\n      localStorage.setItem('authToken', token);\n      const me = await hydrateUser();\n      return {\n        success: true,\n        user: me\n      };\n    } catch (e) {\n      var _e$response3, _e$response3$data;\n      const msg = (e === null || e === void 0 ? void 0 : (_e$response3 = e.response) === null || _e$response3 === void 0 ? void 0 : (_e$response3$data = _e$response3.data) === null || _e$response3$data === void 0 ? void 0 : _e$response3$data.error) || e.message || 'Registration failed';\n      setError(msg);\n      return {\n        success: false,\n        error: msg\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to log user out\n  const logout = () => {\n    localStorage.removeItem('authToken'); // Remove saved token\n    setUser(null); // Clear user info\n    setError(null);\n  };\n\n  // Function to update user info (like when they change status)\n  const updateUser = updated => {\n    setUser(prev => prev ? {\n      ...prev,\n      ...updated\n    } : prev);\n  };\n  const clearError = () => setError(null);\n\n  // All the auth functions and state that components can use\n  const value = useMemo(() => ({\n    user,\n    loading,\n    error,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n    updateUser,\n    clearError\n  }), [user, loading, error]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"wi5KuL9eDCr/WC6v09qHBusz4cc=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useMemo","useState","authAPI","usersAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","ctx","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","hydrateUser","data","getCurrentUser","token","localStorage","getItem","e","_e$response","console","response","message","removeItem","login","username","password","accessToken","setItem","me","success","_e$response2","_e$response2$data","msg","register","userData","_e$response3","_e$response3$data","logout","updateUser","updated","prev","clearError","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/danit/team-availability-system/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useMemo, useState } from 'react';\r\nimport { authAPI, usersAPI } from '../services/api';\r\n\r\n// Context that manages user login state across the whole app\r\nconst AuthContext = createContext(null);\r\n\r\n// Hook to use auth context in any component\r\nexport const useAuth = () => {\r\n  const ctx = useContext(AuthContext);\r\n  if (!ctx) throw new Error('useAuth must be used within an AuthProvider');\r\n  return ctx;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);        // Current logged in user info\r\n  const [loading, setLoading] = useState(true);  // Are we still checking if user is logged in?\r\n  const [error, setError] = useState(null);      // Any login/auth errors\r\n\r\n  // Helper function to get current user info from server\r\n  const hydrateUser = async () => {\r\n    const { data } = await usersAPI.getCurrentUser(); // This uses the stored token\r\n    if (!data?.user) throw new Error('Failed to load current user');\r\n    setUser(data.user);\r\n    return data.user;\r\n  };\r\n\r\n  // When app starts, check if user is already logged in\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const token = localStorage.getItem('authToken');\r\n        if (token) {\r\n          // Token exists, try to get user info\r\n          await hydrateUser();\r\n        }\r\n      } catch (e) {\r\n        console.error('Token validation failed:', e?.response?.data || e.message);\r\n        // Token is invalid, remove it\r\n        localStorage.removeItem('authToken');\r\n        setUser(null);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  // Function to log user in\r\n  const login = async (username, password) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      // Send login request to server\r\n      const { data } = await authAPI.login({ username, password });\r\n      const token = data?.token || data?.accessToken;\r\n      if (!token) throw new Error('No token in response.');\r\n\r\n      // Save token so user stays logged in\r\n      localStorage.setItem('authToken', token);\r\n\r\n      // Get fresh user info from server\r\n      const me = await hydrateUser();\r\n      return { success: true, user: me };\r\n    } catch (e) {\r\n      const msg = e?.response?.data?.error || e.message || 'Login failed';\r\n      setError(msg);\r\n      throw new Error(msg);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      if (!authAPI.register) {\r\n        throw new Error('Register endpoint not implemented on client.');\r\n      }\r\n      const { data } = await authAPI.login(userData);\r\n      const token = data?.token || data?.accessToken;\r\n      if (!token) throw new Error('No token in response.');\r\n\r\n      localStorage.setItem('authToken', token);\r\n\r\n      const me = await hydrateUser();\r\n      return { success: true, user: me };\r\n    } catch (e) {\r\n      const msg = e?.response?.data?.error || e.message || 'Registration failed';\r\n      setError(msg);\r\n      return { success: false, error: msg };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to log user out\r\n  const logout = () => {\r\n    localStorage.removeItem('authToken'); // Remove saved token\r\n    setUser(null); // Clear user info\r\n    setError(null);\r\n  };\r\n\r\n  // Function to update user info (like when they change status)\r\n  const updateUser = (updated) => {\r\n    setUser((prev) => (prev ? { ...prev, ...updated } : prev));\r\n  };\r\n\r\n  const clearError = () => setError(null);\r\n\r\n  // All the auth functions and state that components can use\r\n  const value = useMemo(\r\n    () => ({\r\n      user,\r\n      loading,\r\n      error,\r\n      isAuthenticated: !!user,\r\n      login,\r\n      register,\r\n      logout,\r\n      updateUser,\r\n      clearError,\r\n    }),\r\n    [user, loading, error]\r\n  );\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}