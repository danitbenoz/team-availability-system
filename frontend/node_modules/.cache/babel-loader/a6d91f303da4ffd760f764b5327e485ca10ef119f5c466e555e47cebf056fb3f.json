{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('authToken');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API endpoints\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials)\n};\n\n// Users API endpoints\nexport const usersAPI = {\n  getAllUsers: statusFilter => {\n    const params = statusFilter ? {\n      status: statusFilter\n    } : {};\n    return api.get('/users', {\n      params\n    });\n  },\n  getCurrentUser: () => api.get('/users/me'),\n  updateUserStatus: statusId => api.put('/users/me/status', {\n    statusId\n  }),\n  getUserById: id => api.get(`/users/${id}`)\n};\n\n// Statuses API endpoints\nexport const statusesAPI = {\n  getAllStatuses: () => api.get('/statuses'),\n  getStatusById: id => api.get(`/statuses/${id}`),\n  getStatusUserCount: id => api.get(`/statuses/${id}/users/count`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","post","usersAPI","getAllUsers","statusFilter","params","get","getCurrentUser","updateUserStatus","statusId","put","getUserById","id","statusesAPI","getAllStatuses","getStatusById","getStatusUserCount"],"sources":["C:/Users/danit/team-availability-system/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle auth errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('authToken');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API endpoints\r\nexport const authAPI = {\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n};\r\n\r\n// Users API endpoints\r\nexport const usersAPI = {\r\n  getAllUsers: (statusFilter) => {\r\n    const params = statusFilter ? { status: statusFilter } : {};\r\n    return api.get('/users', { params });\r\n  },\r\n  getCurrentUser: () => api.get('/users/me'),\r\n  updateUserStatus: (statusId) => api.put('/users/me/status', { statusId }),\r\n  getUserById: (id) => api.get(`/users/${id}`),\r\n};\r\n\r\n// Statuses API endpoints\r\nexport const statusesAPI = {\r\n  getAllStatuses: () => api.get('/statuses'),\r\n  getStatusById: (id) => api.get(`/statuses/${id}`),\r\n  getStatusUserCount: (id) => api.get(`/statuses/${id}/users/count`),\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,GAAG,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;IACpCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,OAAO,GAAG;EACrBC,KAAK,EAAGC,WAAW,IAAKzB,GAAG,CAAC0B,IAAI,CAAC,aAAa,EAAED,WAAW;AAC7D,CAAC;;AAED;AACA,OAAO,MAAME,QAAQ,GAAG;EACtBC,WAAW,EAAGC,YAAY,IAAK;IAC7B,MAAMC,MAAM,GAAGD,YAAY,GAAG;MAAEX,MAAM,EAAEW;IAAa,CAAC,GAAG,CAAC,CAAC;IAC3D,OAAO7B,GAAG,CAAC+B,GAAG,CAAC,QAAQ,EAAE;MAAED;IAAO,CAAC,CAAC;EACtC,CAAC;EACDE,cAAc,EAAEA,CAAA,KAAMhC,GAAG,CAAC+B,GAAG,CAAC,WAAW,CAAC;EAC1CE,gBAAgB,EAAGC,QAAQ,IAAKlC,GAAG,CAACmC,GAAG,CAAC,kBAAkB,EAAE;IAAED;EAAS,CAAC,CAAC;EACzEE,WAAW,EAAGC,EAAE,IAAKrC,GAAG,CAAC+B,GAAG,CAAC,UAAUM,EAAE,EAAE;AAC7C,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG;EACzBC,cAAc,EAAEA,CAAA,KAAMvC,GAAG,CAAC+B,GAAG,CAAC,WAAW,CAAC;EAC1CS,aAAa,EAAGH,EAAE,IAAKrC,GAAG,CAAC+B,GAAG,CAAC,aAAaM,EAAE,EAAE,CAAC;EACjDI,kBAAkB,EAAGJ,EAAE,IAAKrC,GAAG,CAAC+B,GAAG,CAAC,aAAaM,EAAE,cAAc;AACnE,CAAC;AAED,eAAerC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}